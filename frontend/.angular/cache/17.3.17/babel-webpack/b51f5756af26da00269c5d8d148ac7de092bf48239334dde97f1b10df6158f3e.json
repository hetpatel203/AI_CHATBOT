{"ast":null,"code":"import { CommonModule } from '@angular/common'; // Common directives like *ngFor, *ngIf\nimport { FormsModule } from '@angular/forms'; // Two-way data binding with [(ngModel)]\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction AppComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    i0.ɵɵclassMap(\"message \" + msg_r1.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", msg_r1.type === \"user\" ? \"You\" : \"AI\", \":\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", msg_r1.content, \" \");\n  }\n}\n// Component decorator - defines this class as an Angular component\n// Main component class - contains all the logic and data\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    // Constructor - runs when component is created\n    // Dependency injection: Angular provides HttpClient instance\n    constructor(http) {\n      this.http = http;\n      // Component properties (data that the template can access)\n      this.messages = []; // Array to store all chat messages\n      this.inputMessage = ''; // Current text in the input field\n      this.loading = false; // Flag to show loading state\n      // Load previous chat messages from browser's local storage\n      const saved = localStorage.getItem('chatbot-messages');\n      if (saved) {\n        // Parse JSON string back to array and restore messages\n        this.messages = JSON.parse(saved);\n        // Scroll to bottom after a short delay to show latest messages\n        setTimeout(() => this.scrollToBottom(), 100);\n      }\n    }\n    // Method called when user sends a message\n    sendMessage() {\n      // Check if input is empty or only whitespace - exit if so\n      if (!this.inputMessage.trim()) return;\n      // Add user's message to the messages array\n      this.messages.push({\n        type: 'user',\n        content: this.inputMessage\n      });\n      // Save messages to browser storage\n      this.saveMessages();\n      // Set loading state to true (disables send button)\n      this.loading = true;\n      // Make HTTP POST request to backend API\n      // <any> tells TypeScript we expect any type of response\n      this.http.post('http://localhost:8002/api/chat', {\n        message: this.inputMessage\n      }).subscribe({\n        // Success callback - runs when API call succeeds\n        next: res => {\n          // Add AI response to messages array\n          this.messages.push({\n            type: 'bot',\n            content: res.response\n          });\n          this.saveMessages(); // Save updated messages\n          this.loading = false; // Stop loading state\n          // Scroll to show new message after DOM updates\n          setTimeout(() => this.scrollToBottom(), 100);\n        },\n        // Error callback - runs when API call fails\n        error: () => {\n          // Add error message to chat\n          this.messages.push({\n            type: 'bot',\n            content: 'Error connecting to server'\n          });\n          this.saveMessages();\n          this.loading = false;\n          setTimeout(() => this.scrollToBottom(), 100);\n        }\n      });\n      // Clear the input field after sending\n      this.inputMessage = '';\n      // Scroll to bottom to show user's message\n      setTimeout(() => this.scrollToBottom(), 100);\n    }\n    // Helper method to save messages to browser's local storage\n    saveMessages() {\n      // Convert messages array to JSON string and store in localStorage\n      // This persists chat history even after page refresh\n      localStorage.setItem('chatbot-messages', JSON.stringify(this.messages));\n    }\n    // Helper method to automatically scroll chat to bottom\n    scrollToBottom() {\n      // Find the chat box element in the DOM\n      const chatBox = document.querySelector('.chat-box');\n      if (chatBox) {\n        // Set scroll position to maximum (bottom)\n        // scrollHeight is total height, scrollTop is current scroll position\n        chatBox.scrollTop = chatBox.scrollHeight;\n      }\n    }\n    static {\n      this.ɵfac = function AppComponent_Factory(t) {\n        return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: AppComponent,\n        selectors: [[\"app-root\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 9,\n        vars: 3,\n        consts: [[1, \"container\"], [1, \"chat-box\"], [3, \"class\", 4, \"ngFor\", \"ngForOf\"], [1, \"input-area\"], [\"placeholder\", \"Ask about budgeting, investing, etc.\", 3, \"ngModelChange\", \"keyup.enter\", \"ngModel\"], [3, \"click\", \"disabled\"]],\n        template: function AppComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n            i0.ɵɵtext(2, \"AI Financial Advisor\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 1);\n            i0.ɵɵtemplate(4, AppComponent_div_4_Template, 4, 4, \"div\", 2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"div\", 3)(6, \"input\", 4);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_6_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.inputMessage, $event) || (ctx.inputMessage = $event);\n              return $event;\n            });\n            i0.ɵɵlistener(\"keyup.enter\", function AppComponent_Template_input_keyup_enter_6_listener() {\n              return ctx.sendMessage();\n            });\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(7, \"button\", 5);\n            i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n              return ctx.sendMessage();\n            });\n            i0.ɵɵtext(8, \"Send\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.inputMessage);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"disabled\", ctx.loading);\n          }\n        },\n        dependencies: [CommonModule, i2.NgForOf, FormsModule, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n        styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%], #root[_ngcontent-%COMP%], app-root[_ngcontent-%COMP%] {\\n      height: 100vh !important;\\n      min-height: 100vh !important;\\n      max-height: 100vh !important;\\n      margin: 0 !important;\\n      padding: 0 !important;\\n      background: #f4f6fb !important;\\n      overflow: hidden !important;\\n      position: fixed !important;\\n      width: 100vw !important;\\n    }\\n    .container[_ngcontent-%COMP%] {\\n      max-width: 750px;\\n      height: 96vh;\\n      min-height: 600px;\\n      margin: 2vh auto;\\n      padding: 40px 36px 28px 36px;\\n      background: #fff;\\n      border-radius: 18px;\\n      box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.12);\\n      border: 1px solid #e3e8f0;\\n      display: flex;\\n      flex-direction: column;\\n      overflow: hidden;\\n    }\\n    h1[_ngcontent-%COMP%] {\\n      text-align: center;\\n      color: #2d3a4a;\\n      font-size: 2.2rem;\\n      font-weight: 700;\\n      letter-spacing: 1px;\\n      margin-bottom: 18px;\\n      background: linear-gradient(90deg, #4f8cff 0%, #6ee7b7 100%);\\n      -webkit-background-clip: text;\\n      -webkit-text-fill-color: transparent;\\n      background-clip: text;\\n    }\\n    .chat-box[_ngcontent-%COMP%] {\\n      flex: 1 1 auto;\\n      min-height: 0;\\n      border-radius: 12px;\\n      border: 1.5px solid #e3e8f0;\\n      padding: 22px 18px;\\n      overflow-y: auto;\\n      margin: 28px 0 18px 0;\\n      background: linear-gradient(135deg, #f7fafc 60%, #e3f0ff 100%);\\n      box-shadow: 0 2px 8px 0 rgba(31, 38, 135, 0.06);\\n      transition: box-shadow 0.2s;\\n      display: flex;\\n      flex-direction: column;\\n      max-height: 100%;\\n    }\\n    .chat-box[_ngcontent-%COMP%]::-webkit-scrollbar {\\n      width: 8px;\\n      background: #e3e8f0;\\n      border-radius: 8px;\\n    }\\n    .chat-box[_ngcontent-%COMP%]::-webkit-scrollbar-thumb {\\n      background: #b6c6e3;\\n      border-radius: 8px;\\n    }\\n    .message[_ngcontent-%COMP%] {\\n      margin: 12px 0;\\n      padding: 12px 18px;\\n      border-radius: 10px;\\n      font-size: 1.08rem;\\n      box-shadow: 0 1px 4px 0 rgba(31, 38, 135, 0.04);\\n      transition: background 0.2s;\\n      word-break: break-word;\\n      line-height: 1.6;\\n    }\\n    .message.user[_ngcontent-%COMP%] {\\n      background: linear-gradient(90deg, #e3f0ff 60%, #d1f7e7 100%);\\n      align-self: flex-end;\\n      border-bottom-right-radius: 2px;\\n      border-top-right-radius: 16px;\\n      border-top-left-radius: 16px;\\n      border-bottom-left-radius: 16px;\\n      color: #2d3a4a;\\n      font-weight: 500;\\n    }\\n    .message.bot[_ngcontent-%COMP%] {\\n      background: linear-gradient(90deg, #f7fafc 60%, #e3e8f0 100%);\\n      align-self: flex-start;\\n      border-bottom-left-radius: 2px;\\n      border-top-right-radius: 16px;\\n      border-top-left-radius: 16px;\\n      border-bottom-right-radius: 16px;\\n      color: #3b4a5a;\\n    }\\n    .input-area[_ngcontent-%COMP%] {\\n      display: flex;\\n      gap: 12px;\\n      margin-top: 8px;\\n      align-items: center;\\n      background: #f7fafc;\\n      border-radius: 8px;\\n      padding: 10px 12px;\\n      box-shadow: 0 1px 4px 0 rgba(31, 38, 135, 0.04);\\n      border: 1px solid #e3e8f0;\\n    }\\n    input[_ngcontent-%COMP%] {\\n      flex: 1;\\n      padding: 12px 16px;\\n      border: none;\\n      border-radius: 6px;\\n      font-size: 1.08rem;\\n      background: #f4f6fb;\\n      color: #2d3a4a;\\n      outline: none;\\n      transition: box-shadow 0.2s;\\n      box-shadow: 0 1px 2px 0 rgba(31, 38, 135, 0.03);\\n    }\\n    input[_ngcontent-%COMP%]:focus {\\n      box-shadow: 0 0 0 2px #4f8cff33;\\n      background: #e3f0ff;\\n    }\\n    button[_ngcontent-%COMP%] {\\n      padding: 12px 28px;\\n      background: linear-gradient(90deg, #4f8cff 0%, #6ee7b7 100%);\\n      color: white;\\n      border: none;\\n      border-radius: 6px;\\n      font-size: 1.08rem;\\n      font-weight: 600;\\n      cursor: pointer;\\n      box-shadow: 0 2px 8px 0 rgba(31, 38, 135, 0.08);\\n      transition: background 0.2s, box-shadow 0.2s;\\n    }\\n    button[_ngcontent-%COMP%]:disabled {\\n      opacity: 0.6;\\n      cursor: not-allowed;\\n      background: #b6c6e3;\\n    }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQ0k7TUFDRSx3QkFBd0I7TUFDeEIsNEJBQTRCO01BQzVCLDRCQUE0QjtNQUM1QixvQkFBb0I7TUFDcEIscUJBQXFCO01BQ3JCLDhCQUE4QjtNQUM5QiwyQkFBMkI7TUFDM0IsMEJBQTBCO01BQzFCLHVCQUF1QjtJQUN6QjtJQUNBO01BQ0UsZ0JBQWdCO01BQ2hCLFlBQVk7TUFDWixpQkFBaUI7TUFDakIsZ0JBQWdCO01BQ2hCLDRCQUE0QjtNQUM1QixnQkFBZ0I7TUFDaEIsbUJBQW1CO01BQ25CLGdEQUFnRDtNQUNoRCx5QkFBeUI7TUFDekIsYUFBYTtNQUNiLHNCQUFzQjtNQUN0QixnQkFBZ0I7SUFDbEI7SUFDQTtNQUNFLGtCQUFrQjtNQUNsQixjQUFjO01BQ2QsaUJBQWlCO01BQ2pCLGdCQUFnQjtNQUNoQixtQkFBbUI7TUFDbkIsbUJBQW1CO01BQ25CLDREQUE0RDtNQUM1RCw2QkFBNkI7TUFDN0Isb0NBQW9DO01BQ3BDLHFCQUFxQjtJQUN2QjtJQUNBO01BQ0UsY0FBYztNQUNkLGFBQWE7TUFDYixtQkFBbUI7TUFDbkIsMkJBQTJCO01BQzNCLGtCQUFrQjtNQUNsQixnQkFBZ0I7TUFDaEIscUJBQXFCO01BQ3JCLDhEQUE4RDtNQUM5RCwrQ0FBK0M7TUFDL0MsMkJBQTJCO01BQzNCLGFBQWE7TUFDYixzQkFBc0I7TUFDdEIsZ0JBQWdCO0lBQ2xCO0lBQ0E7TUFDRSxVQUFVO01BQ1YsbUJBQW1CO01BQ25CLGtCQUFrQjtJQUNwQjtJQUNBO01BQ0UsbUJBQW1CO01BQ25CLGtCQUFrQjtJQUNwQjtJQUNBO01BQ0UsY0FBYztNQUNkLGtCQUFrQjtNQUNsQixtQkFBbUI7TUFDbkIsa0JBQWtCO01BQ2xCLCtDQUErQztNQUMvQywyQkFBMkI7TUFDM0Isc0JBQXNCO01BQ3RCLGdCQUFnQjtJQUNsQjtJQUNBO01BQ0UsNkRBQTZEO01BQzdELG9CQUFvQjtNQUNwQiwrQkFBK0I7TUFDL0IsNkJBQTZCO01BQzdCLDRCQUE0QjtNQUM1QiwrQkFBK0I7TUFDL0IsY0FBYztNQUNkLGdCQUFnQjtJQUNsQjtJQUNBO01BQ0UsNkRBQTZEO01BQzdELHNCQUFzQjtNQUN0Qiw4QkFBOEI7TUFDOUIsNkJBQTZCO01BQzdCLDRCQUE0QjtNQUM1QixnQ0FBZ0M7TUFDaEMsY0FBYztJQUNoQjtJQUNBO01BQ0UsYUFBYTtNQUNiLFNBQVM7TUFDVCxlQUFlO01BQ2YsbUJBQW1CO01BQ25CLG1CQUFtQjtNQUNuQixrQkFBa0I7TUFDbEIsa0JBQWtCO01BQ2xCLCtDQUErQztNQUMvQyx5QkFBeUI7SUFDM0I7SUFDQTtNQUNFLE9BQU87TUFDUCxrQkFBa0I7TUFDbEIsWUFBWTtNQUNaLGtCQUFrQjtNQUNsQixrQkFBa0I7TUFDbEIsbUJBQW1CO01BQ25CLGNBQWM7TUFDZCxhQUFhO01BQ2IsMkJBQTJCO01BQzNCLCtDQUErQztJQUNqRDtJQUNBO01BQ0UsK0JBQStCO01BQy9CLG1CQUFtQjtJQUNyQjtJQUNBO01BQ0Usa0JBQWtCO01BQ2xCLDREQUE0RDtNQUM1RCxZQUFZO01BQ1osWUFBWTtNQUNaLGtCQUFrQjtNQUNsQixrQkFBa0I7TUFDbEIsZ0JBQWdCO01BQ2hCLGVBQWU7TUFDZiwrQ0FBK0M7TUFDL0MsNENBQTRDO0lBQzlDO0lBQ0E7TUFDRSxZQUFZO01BQ1osbUJBQW1CO01BQ25CLG1CQUFtQjtJQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgIGh0bWwsIGJvZHksICNyb290LCBhcHAtcm9vdCB7XG4gICAgICBoZWlnaHQ6IDEwMHZoICFpbXBvcnRhbnQ7XG4gICAgICBtaW4taGVpZ2h0OiAxMDB2aCAhaW1wb3J0YW50O1xuICAgICAgbWF4LWhlaWdodDogMTAwdmggIWltcG9ydGFudDtcbiAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICAgICAgcGFkZGluZzogMCAhaW1wb3J0YW50O1xuICAgICAgYmFja2dyb3VuZDogI2Y0ZjZmYiAhaW1wb3J0YW50O1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbiAhaW1wb3J0YW50O1xuICAgICAgcG9zaXRpb246IGZpeGVkICFpbXBvcnRhbnQ7XG4gICAgICB3aWR0aDogMTAwdncgIWltcG9ydGFudDtcbiAgICB9XG4gICAgLmNvbnRhaW5lciB7XG4gICAgICBtYXgtd2lkdGg6IDc1MHB4O1xuICAgICAgaGVpZ2h0OiA5NnZoO1xuICAgICAgbWluLWhlaWdodDogNjAwcHg7XG4gICAgICBtYXJnaW46IDJ2aCBhdXRvO1xuICAgICAgcGFkZGluZzogNDBweCAzNnB4IDI4cHggMzZweDtcbiAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICBib3JkZXItcmFkaXVzOiAxOHB4O1xuICAgICAgYm94LXNoYWRvdzogMCA4cHggMzJweCAwIHJnYmEoMzEsIDM4LCAxMzUsIDAuMTIpO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2UzZThmMDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG4gICAgaDEge1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgY29sb3I6ICMyZDNhNGE7XG4gICAgICBmb250LXNpemU6IDIuMnJlbTtcbiAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgbWFyZ2luLWJvdHRvbTogMThweDtcbiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MGRlZywgIzRmOGNmZiAwJSwgIzZlZTdiNyAxMDAlKTtcbiAgICAgIC13ZWJraXQtYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuICAgICAgLXdlYmtpdC10ZXh0LWZpbGwtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgYmFja2dyb3VuZC1jbGlwOiB0ZXh0O1xuICAgIH1cbiAgICAuY2hhdC1ib3gge1xuICAgICAgZmxleDogMSAxIGF1dG87XG4gICAgICBtaW4taGVpZ2h0OiAwO1xuICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgIGJvcmRlcjogMS41cHggc29saWQgI2UzZThmMDtcbiAgICAgIHBhZGRpbmc6IDIycHggMThweDtcbiAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgICBtYXJnaW46IDI4cHggMCAxOHB4IDA7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjZjdmYWZjIDYwJSwgI2UzZjBmZiAxMDAlKTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDhweCAwIHJnYmEoMzEsIDM4LCAxMzUsIDAuMDYpO1xuICAgICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjJzO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgICAuY2hhdC1ib3g6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgIHdpZHRoOiA4cHg7XG4gICAgICBiYWNrZ3JvdW5kOiAjZTNlOGYwO1xuICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIH1cbiAgICAuY2hhdC1ib3g6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICAgIGJhY2tncm91bmQ6ICNiNmM2ZTM7XG4gICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgfVxuICAgIC5tZXNzYWdlIHtcbiAgICAgIG1hcmdpbjogMTJweCAwO1xuICAgICAgcGFkZGluZzogMTJweCAxOHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICAgIGZvbnQtc2l6ZTogMS4wOHJlbTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDRweCAwIHJnYmEoMzEsIDM4LCAxMzUsIDAuMDQpO1xuICAgICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjJzO1xuICAgICAgd29yZC1icmVhazogYnJlYWstd29yZDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxLjY7XG4gICAgfVxuICAgIC5tZXNzYWdlLnVzZXIge1xuICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCAjZTNmMGZmIDYwJSwgI2QxZjdlNyAxMDAlKTtcbiAgICAgIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xuICAgICAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDJweDtcbiAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAxNnB4O1xuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTZweDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDE2cHg7XG4gICAgICBjb2xvcjogIzJkM2E0YTtcbiAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgfVxuICAgIC5tZXNzYWdlLmJvdCB7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsICNmN2ZhZmMgNjAlLCAjZTNlOGYwIDEwMCUpO1xuICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDJweDtcbiAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAxNnB4O1xuICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMTZweDtcbiAgICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiAxNnB4O1xuICAgICAgY29sb3I6ICMzYjRhNWE7XG4gICAgfVxuICAgIC5pbnB1dC1hcmVhIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6IDEycHg7XG4gICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYmFja2dyb3VuZDogI2Y3ZmFmYztcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgICAgIGJveC1zaGFkb3c6IDAgMXB4IDRweCAwIHJnYmEoMzEsIDM4LCAxMzUsIDAuMDQpO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2UzZThmMDtcbiAgICB9XG4gICAgaW5wdXQge1xuICAgICAgZmxleDogMTtcbiAgICAgIHBhZGRpbmc6IDEycHggMTZweDtcbiAgICAgIGJvcmRlcjogbm9uZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgIGZvbnQtc2l6ZTogMS4wOHJlbTtcbiAgICAgIGJhY2tncm91bmQ6ICNmNGY2ZmI7XG4gICAgICBjb2xvcjogIzJkM2E0YTtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDAuMnM7XG4gICAgICBib3gtc2hhZG93OiAwIDFweCAycHggMCByZ2JhKDMxLCAzOCwgMTM1LCAwLjAzKTtcbiAgICB9XG4gICAgaW5wdXQ6Zm9jdXMge1xuICAgICAgYm94LXNoYWRvdzogMCAwIDAgMnB4ICM0ZjhjZmYzMztcbiAgICAgIGJhY2tncm91bmQ6ICNlM2YwZmY7XG4gICAgfVxuICAgIGJ1dHRvbiB7XG4gICAgICBwYWRkaW5nOiAxMnB4IDI4cHg7XG4gICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsICM0ZjhjZmYgMCUsICM2ZWU3YjcgMTAwJSk7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICBmb250LXNpemU6IDEuMDhyZW07XG4gICAgICBmb250LXdlaWdodDogNjAwO1xuICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgYm94LXNoYWRvdzogMCAycHggOHB4IDAgcmdiYSgzMSwgMzgsIDEzNSwgMC4wOCk7XG4gICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDAuMnMsIGJveC1zaGFkb3cgMC4ycztcbiAgICB9XG4gICAgYnV0dG9uOmRpc2FibGVkIHtcbiAgICAgIG9wYWNpdHk6IDAuNjtcbiAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgICBiYWNrZ3JvdW5kOiAjYjZjNmUzO1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n      });\n    }\n  }\n  return AppComponent;\n})();","map":{"version":3,"names":["CommonModule","FormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵclassMap","msg_r1","type","ɵɵadvance","ɵɵtextInterpolate1","content","AppComponent","constructor","http","messages","inputMessage","loading","saved","localStorage","getItem","JSON","parse","setTimeout","scrollToBottom","sendMessage","trim","push","saveMessages","post","message","subscribe","next","res","response","error","setItem","stringify","chatBox","document","querySelector","scrollTop","scrollHeight","ɵɵdirectiveInject","i1","HttpClient","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵtemplate","AppComponent_div_4_Template","ɵɵtwoWayListener","AppComponent_Template_input_ngModelChange_6_listener","$event","ɵɵtwoWayBindingSet","ɵɵlistener","AppComponent_Template_input_keyup_enter_6_listener","AppComponent_Template_button_click_7_listener","ɵɵproperty","ɵɵtwoWayProperty","i2","NgForOf","i3","DefaultValueAccessor","NgControlStatus","NgModel","styles"],"sources":["C:\\Users\\het_p\\Desktop\\chatbot\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["// Import necessary Angular modules and services\nimport { Component } from '@angular/core';           // Core Angular component decorator\nimport { CommonModule } from '@angular/common';     // Common directives like *ngFor, *ngIf\nimport { FormsModule } from '@angular/forms';       // Two-way data binding with [(ngModel)]\nimport { HttpClient } from '@angular/common/http';  // HTTP client for API calls\n\n// Component decorator - defines this class as an Angular component\n@Component({\n  selector: 'app-root',        // HTML tag name to use this component\n  standalone: true,            // Modern Angular standalone component (no module needed)\n  imports: [CommonModule, FormsModule],  // Import required modules for this component\n  // HTML template for the component - defines the user interface\n  template: `\n    <!-- Main container for the entire chat interface -->\n    <div class=\"container\">\n      <!-- Application title -->\n      <h1>AI Financial Advisor</h1>\n      \n      <!-- Chat messages display area -->\n      <div class=\"chat-box\">\n        <!-- Loop through all messages and display them -->\n        <!-- *ngFor is Angular directive to repeat elements -->\n        <!-- [class] dynamically sets CSS class based on message type -->\n        <div *ngFor=\"let msg of messages\" [class]=\"'message ' + msg.type\">\n          <!-- Show 'You' for user messages, 'AI' for bot messages -->\n          <!-- {{ }} is Angular interpolation to display data -->\n          <strong>{{msg.type === 'user' ? 'You' : 'AI'}}:</strong> {{msg.content}}\n        </div>\n      </div>\n      \n      <!-- Input area for typing and sending messages -->\n      <div class=\"input-area\">\n        <!-- Input field with two-way data binding -->\n        <!-- [(ngModel)] creates two-way binding with inputMessage property -->\n        <!-- (keyup.enter) listens for Enter key press -->\n        <input [(ngModel)]=\"inputMessage\" \n               (keyup.enter)=\"sendMessage()\"\n               placeholder=\"Ask about budgeting, investing, etc.\">\n        <!-- Send button with click handler and disabled state -->\n        <!-- [disabled] dynamically disables button when loading -->\n        <button (click)=\"sendMessage()\" [disabled]=\"loading\">Send</button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    html, body, #root, app-root {\n      height: 100vh !important;\n      min-height: 100vh !important;\n      max-height: 100vh !important;\n      margin: 0 !important;\n      padding: 0 !important;\n      background: #f4f6fb !important;\n      overflow: hidden !important;\n      position: fixed !important;\n      width: 100vw !important;\n    }\n    .container {\n      max-width: 750px;\n      height: 96vh;\n      min-height: 600px;\n      margin: 2vh auto;\n      padding: 40px 36px 28px 36px;\n      background: #fff;\n      border-radius: 18px;\n      box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.12);\n      border: 1px solid #e3e8f0;\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n    }\n    h1 {\n      text-align: center;\n      color: #2d3a4a;\n      font-size: 2.2rem;\n      font-weight: 700;\n      letter-spacing: 1px;\n      margin-bottom: 18px;\n      background: linear-gradient(90deg, #4f8cff 0%, #6ee7b7 100%);\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      background-clip: text;\n    }\n    .chat-box {\n      flex: 1 1 auto;\n      min-height: 0;\n      border-radius: 12px;\n      border: 1.5px solid #e3e8f0;\n      padding: 22px 18px;\n      overflow-y: auto;\n      margin: 28px 0 18px 0;\n      background: linear-gradient(135deg, #f7fafc 60%, #e3f0ff 100%);\n      box-shadow: 0 2px 8px 0 rgba(31, 38, 135, 0.06);\n      transition: box-shadow 0.2s;\n      display: flex;\n      flex-direction: column;\n      max-height: 100%;\n    }\n    .chat-box::-webkit-scrollbar {\n      width: 8px;\n      background: #e3e8f0;\n      border-radius: 8px;\n    }\n    .chat-box::-webkit-scrollbar-thumb {\n      background: #b6c6e3;\n      border-radius: 8px;\n    }\n    .message {\n      margin: 12px 0;\n      padding: 12px 18px;\n      border-radius: 10px;\n      font-size: 1.08rem;\n      box-shadow: 0 1px 4px 0 rgba(31, 38, 135, 0.04);\n      transition: background 0.2s;\n      word-break: break-word;\n      line-height: 1.6;\n    }\n    .message.user {\n      background: linear-gradient(90deg, #e3f0ff 60%, #d1f7e7 100%);\n      align-self: flex-end;\n      border-bottom-right-radius: 2px;\n      border-top-right-radius: 16px;\n      border-top-left-radius: 16px;\n      border-bottom-left-radius: 16px;\n      color: #2d3a4a;\n      font-weight: 500;\n    }\n    .message.bot {\n      background: linear-gradient(90deg, #f7fafc 60%, #e3e8f0 100%);\n      align-self: flex-start;\n      border-bottom-left-radius: 2px;\n      border-top-right-radius: 16px;\n      border-top-left-radius: 16px;\n      border-bottom-right-radius: 16px;\n      color: #3b4a5a;\n    }\n    .input-area {\n      display: flex;\n      gap: 12px;\n      margin-top: 8px;\n      align-items: center;\n      background: #f7fafc;\n      border-radius: 8px;\n      padding: 10px 12px;\n      box-shadow: 0 1px 4px 0 rgba(31, 38, 135, 0.04);\n      border: 1px solid #e3e8f0;\n    }\n    input {\n      flex: 1;\n      padding: 12px 16px;\n      border: none;\n      border-radius: 6px;\n      font-size: 1.08rem;\n      background: #f4f6fb;\n      color: #2d3a4a;\n      outline: none;\n      transition: box-shadow 0.2s;\n      box-shadow: 0 1px 2px 0 rgba(31, 38, 135, 0.03);\n    }\n    input:focus {\n      box-shadow: 0 0 0 2px #4f8cff33;\n      background: #e3f0ff;\n    }\n    button {\n      padding: 12px 28px;\n      background: linear-gradient(90deg, #4f8cff 0%, #6ee7b7 100%);\n      color: white;\n      border: none;\n      border-radius: 6px;\n      font-size: 1.08rem;\n      font-weight: 600;\n      cursor: pointer;\n      box-shadow: 0 2px 8px 0 rgba(31, 38, 135, 0.08);\n      transition: background 0.2s, box-shadow 0.2s;\n    }\n    button:disabled {\n      opacity: 0.6;\n      cursor: not-allowed;\n      background: #b6c6e3;\n    }\n  `]\n})\n// Main component class - contains all the logic and data\nexport class AppComponent {\n  // Component properties (data that the template can access)\n  messages: any[] = [];        // Array to store all chat messages\n  inputMessage = '';           // Current text in the input field\n  loading = false;             // Flag to show loading state\n\n  // Constructor - runs when component is created\n  // Dependency injection: Angular provides HttpClient instance\n  constructor(private http: HttpClient) {\n    // Load previous chat messages from browser's local storage\n    const saved = localStorage.getItem('chatbot-messages');\n    if (saved) {\n      // Parse JSON string back to array and restore messages\n      this.messages = JSON.parse(saved);\n      // Scroll to bottom after a short delay to show latest messages\n      setTimeout(() => this.scrollToBottom(), 100);\n    }\n  }\n\n  // Method called when user sends a message\n  sendMessage() {\n    // Check if input is empty or only whitespace - exit if so\n    if (!this.inputMessage.trim()) return;\n\n    // Add user's message to the messages array\n    this.messages.push({ type: 'user', content: this.inputMessage });\n    // Save messages to browser storage\n    this.saveMessages();\n    // Set loading state to true (disables send button)\n    this.loading = true;\n\n    // Make HTTP POST request to backend API\n    // <any> tells TypeScript we expect any type of response\n    this.http.post<any>('http://localhost:8002/api/chat', { message: this.inputMessage })\n      .subscribe({  // Subscribe to the HTTP response (Observable pattern)\n        // Success callback - runs when API call succeeds\n        next: (res) => {\n          // Add AI response to messages array\n          this.messages.push({ type: 'bot', content: res.response });\n          this.saveMessages();  // Save updated messages\n          this.loading = false; // Stop loading state\n          // Scroll to show new message after DOM updates\n          setTimeout(() => this.scrollToBottom(), 100);\n        },\n        // Error callback - runs when API call fails\n        error: () => {\n          // Add error message to chat\n          this.messages.push({ type: 'bot', content: 'Error connecting to server' });\n          this.saveMessages();\n          this.loading = false;\n          setTimeout(() => this.scrollToBottom(), 100);\n        }\n      });\n\n    // Clear the input field after sending\n    this.inputMessage = '';\n    // Scroll to bottom to show user's message\n    setTimeout(() => this.scrollToBottom(), 100);\n  }\n\n  // Helper method to save messages to browser's local storage\n  saveMessages() {\n    // Convert messages array to JSON string and store in localStorage\n    // This persists chat history even after page refresh\n    localStorage.setItem('chatbot-messages', JSON.stringify(this.messages));\n  }\n\n  // Helper method to automatically scroll chat to bottom\n  scrollToBottom() {\n    // Find the chat box element in the DOM\n    const chatBox = document.querySelector('.chat-box');\n    if (chatBox) {\n      // Set scroll position to maximum (bottom)\n      // scrollHeight is total height, scrollTop is current scroll position\n      chatBox.scrollTop = chatBox.scrollHeight;\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}